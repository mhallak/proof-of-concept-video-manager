1. Found: https://linuxtv.org/wiki/index.php/V4L_capturing
1.5 loading kernel module https://www.tecmint.com/load-and-unload-kernel-modules-in-linux/
1.5+: mod info: /sbin/modinfo tw6869
2. Installed mpv: mpv av://v4l2:/dev/video0 tv:///0 works
6. check capabilities of camera /dev/video0
gst-launch-1.0 --gst-debug=v4l2src:5 v4l2src device="/dev/video0" ! fakesink 2>&1 | sed -une '/caps of src/ s/[:;] /\n/gp'
7. capture in a file: sensoray_testing/capture -d /dev/video1 -f -c 100 -o > input.yuv
8. play file with gstreamer:
gst-launch-1.0 filesrc location=./input.yuv ! videoparse height=576 width=704 format=uyvy framerate=1/25 ! queue ! videoconvert ! xvimagesink sync=false
9. play with vlc:
vlc --demux rawvideo --rawvid-fps 25 --rawvid-width 704 --rawvid-height 576 --rawvid-chroma UYVY input.yuv  
10. gstreamer proper errored pipe:
gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw, width=704, height=576, format=UYVY ! queue ! videoconvert ! xvimagesink sync=false
11. Probe video driver: v4l2-ctl -d /dev/video1 -D -V
12. display kernel: tail -f /var/log/syslog
***********************************************************************************************************************************
13. Good pipe: see http://www.sensoray.com/wiki/index.php?title=812/1012_gstreamer
gst-launch-1.0 -v v4l2src device=/dev/video3 ! video/x-raw,format=UYVY,interlace-mode=interleaved ! videoconvert ! xvimagesink
***************************************************************************************************************************************

14. vlc: vlc v4l2:///dev/video0

15. Start:
https://developer.download.nvidia.com/embedded/L4T/r32_Release_v1.0/Docs/Accelerated_GStreamer_User_Guide.pdf?qXQjluvwcY1jULNlXsegnlP8MjAuFs9dj_ClDRWCDsNZqizARm9t6yiKQFJqeZQe4DenNx-1YVznnaEq88Wwss1wM0GUSiqW3VY6PKCARoJbVLTX_K4oyXU-6-A6RkLGa-5GnT7W87PGirJCfh2eIs9entPLDZ_p_qtRjQ21SpCOwkSav6c

16. Good pipelines: ************do not use omx****
gst-launch-1.0 filesrc location=pedestrians.mp4 ! qtdemux ! queue ! h264parse ! nvv4l2decoder ! nv3dsink -e
better performance:
gst-launch-1.0 filesrc location=pedestrians.mp4 ! qtdemux ! queue ! h264parse ! nvv4l2decoder enable-max-performance=1 ! nv3dsink -e

17. Samples
https://kodi.wiki/view/Samples

18. Extraordinary video quality:
gst-launch-1.0 filesrc location=jellyfish-400-mbps-4k-uhd-hevc-10bit.mkv ! matroskademux ! queue ! h265parse ! nvv4l2decoder ! nvvidconv ! 'video/x-raw(memory:NVMM), format=(string)NV12' ! nv3dsink -e
Nice h265:
gst-launch-1.0 filesrc location=sample_1080p_h265.mp4 ! qtdemux ! queue ! h265parse ! nvv4l2decoder ! nv3dsink -e
Image:
gst-launch-1.0 filesrc location=baboon.jpg ! nvjpegdec ! imagefreeze ! xvimagesink -e
Convert 420 to 422 with ffmpeg:
>> ffmpeg -pix_fmt yuv420p -i lena.jpg -pix_fmt yuv422p lenaffmpeg.jpg


19. Encoding
Should be:
gst-launch-1.0  nvarguscamerasrc ! 'video/x-raw(memory:NVMM), width=(int)1920, height=(int)1080, format=(string)NV12, framerate=(fraction)30/1' ! nvv4l2h264enc bitrate=8000000 ! h264parse ! qtmux ! filesink location=michele_test_h264.mp4 -e
But I tried that:
gst-launch-1.0 videotestsrc ! 'video/x-raw(memory:NVMM), width=(int)1920, height=(int)1080, format=(string)NV12, framerate=(fraction)30/1' ! nvv4l2h264enc bitrate=8000000 ! h264parse ! qtmux ! filesink location=michele_test_h264.mp4 -e
Problem with this testsrc to encode h264 - no camera connected right now.

JPEG Encode
gst-launch-1.0 videotestsrc num-buffers=1 ! 'video/x-raw, width=(int)640, height=(int)480,  format=(string)I420' ! nvjpegenc ! filesink location=micheletest.jpg -e

20. Spoil a good image: ./test-launch "( v4l2src device=/dev/video3 ! video/x-raw, format=UYVY,  width=720, height=576, interlace-mode=interleaved ! nvvidconv ! video/x-raw(memory:NVMM), width=720, height=576, format=(string)NV12, framerate=(fraction)25/1 ! nvv4l2h264enc bitrate=8000000 ! h264parse ! rtph264pay name=pay0 pt=96 )"

gst-launch-1.0 filesrc location=baboon.jpg ! nvjpegdec ! 'video/x-raw, format=(string)I420' ! nvjpegenc ! filesink location=tryingbaboon.jpg -e

21. Resolution ffmpeg
ffmpeg -i <file name>

22. Tegra release:
head -n 1 /etc/nv_tegra_release
[full info: cat /etc/nv_tegra_release]

23. Create a h264 movie from videotestsrc with nvv4l2h264enc:
gst-launch-1.0 videotestsrc num-buffers=300 ! 'video/x-raw, width=(int)1280, height=(int)720, format=(string)I420, framerate=(fraction)30/1' ! nvvidconv ! 'video/x-raw(memory:NVMM), format=(string)I420' ! nvv4l2h264enc bitrate=8000000 ! h264parse ! qtmux ! filesink location=michele_test_h264.mp4 -e

24. Starting to check mixer gstreamer plugin: https://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-videomixer.html
I420: 
gst-launch-1.0 videotestsrc pattern=1 !   video/x-raw, format=I420,  framerate=\(fraction\)10/1,width=100,height=100  !   videomixer name=mix !   videoconvert ! ximagesink   videotestsrc !   video/x-raw, format=I420, framerate=\(fraction\)5/1,width=320,height=240 ! mix. 
Complex:
gst-launch-1.0 videomixer name=mixer sink_1::alpha=0.5 sink_1::xpos=50 sink_1::ypos=50 ! videoconvert ! ximagesink videotestsrc pattern=snow timestamp-offset=3000000000 ! "video/x-raw,format=AYUV,framerate=(fraction)30/1,width=640,height=480" !   timeoverlay ! queue2 ! mixer. videotestsrc pattern=smpte !  "video/x-raw,format=AYUV,framerate=(fraction)10/1,width=800,height=600" ! queue2 ! mixer.

25. DRM      Video sink
- Stop display manager:
sudo systemctl stop gdm
sudo loginctl terminate-seat seat0
- ALT+CTL+F1 ==> ALT+CTL+F5
gst-launch-1.0 filesrc location=<filename.mp4> ! \
 qtdemux! queue ! h264parse !nvv4l2decoder ! nvdrmvideosink -e
gst-launch-1.0 filesrc location=<filename.mp4> ! \
 qtdemux! queue ! h264parse ! ! nvv4l2decoder ! nvdrmvideosink \
 conn_id=0 plane_id=1 set_mode=0 -e
- gst-launch-1.0 filesrc location=pedestrians.mp4 ! qtdemux name=demux ! h264parse  ! nvv4l2decoder ! nvvidconv interpolation-method=1 ! 'video/x-raw(memory:NVMM), format=(string)I420, width=1280, height=720' ! nvdrmvideosink -e

26. RTSP
References:
https://devtalk.nvidia.com/default/topic/1055034/jetson-tx2/how-to-generate-rtsp-stream-with-gstreamer-in-tx2/
==> REAL: https://devtalk.nvidia.com/default/topic/1018689/jetson-tx2/vlc-playing-gstreamer-flow/post/5187270/#5187270
sudo apt-get install libgstrtspserver-1.0 libgstreamer1.0-dev
git clone https://github.com/GStreamer/gst-rtsp-server.git
cd gst-rtsp-server/examples
gcc test-launch.c -o test-launch $(pkg-config --cflags --libs gstreamer-1.0 gstreamer-rtsp-server-1.0)
./test-launch "videotestsrc ! omxh265enc ! rtph265pay name=pay0 pt=96"

27. Important note:
VLC doesn't work on the jetson tx2 may be because no HW acceleration; the version is for the CPU only ?
https://devtalk.nvidia.com/default/topic/1004977/jetson-tx2/vlc-not-working-on-l4t-r27-0-1-/

28. Worked:
1- Record:  gst-launch-1.0 videotestsrc ! 'video/x-raw, format=(string)I420, width=(int)640,height=(int)480' ! omxh264enc ! 'video/x-h264, stream-format=(string)byte-stream' ! h264parse !  qtmux ! filesink location=simpleencode.mp4 -e
2- Play: gst-launch-1.0 filesrc location=./simpleencode.mp4 ! qtdemux ! queue ! h264parse ! nvv4l2decoder ! nv3dsink -e
1- Record: gst-launch-1.0 -v v4l2src device=/dev/video3 ! 'video/x-raw, format=(string)UYVY, width=(int)640,height=(int)480, interlace-mode=interleaved' ! videoconvert ! omxh264enc ! 'video/x-h264, stream-format=(string)byte-stream' ! h264parse !  qtmux ! filesink location=xxx.mp4 -e
2- Play: gst-launch-1.0 filesrc location=./xxx.mp4 ! qtdemux ! queue ! h264parse ! nvv4l2decoder ! nv3dsink -e 
************************************************************************************************************************************************
1-2: Stream camera: ./test-launch "v4l2src device="/dev/video3" ! video/x-raw,format=UYVY,interlace-mode=interleaved! videoconvert ! omxh265enc ! rtph265pay name=pay0 pt=96"
3: On another computer: gst-launch-1.0 rtspsrc location=rtsp://172.23.40.28:8554/test ! decodebin ! xvimagesink
************************************************************************************************************************************************
29. Kate Issue
Doesn't load with last session:
https://bugs.launchpad.net/ubuntu/+source/kdesdk/+bug/774985

30. Check VLC instance on UDP: vlc -vv --demux h264 --h264-fps 60 udp://@:5000

31. Problems using VLC on Jetson TX2 - May be try to revert to version 2.2.4?
https://devtalk.nvidia.com/default/topic/990198/
        Hi Patouceul,
        We don't have HW acceleration integrated with vlc(based on ffmpeg). Please try gstreamer or MM APIs.

32. Audio: the following pipe might be ok... 
    >> gst-launch-1.0 filesrc lgst-launch-1.0 v4l2src device=/dev/video3 ! video/x-raw(memory:NVMM), width=(int)720, height=(int)576,format=UYVY,interlace-mode=interleaved framerate=(fraction)30/1 ! videoconvert ! xvimagesinkocation=ChID-BLITS-EBU-Narration.mp4 ! qtdemux name=demux demux.audio_0 ! queue ! avdec_aac ! audioconvert ! alsasink -e
List of audio devices:
    >> ls /proc/asound -l
Parameters of alsasink: device_name or card_name: ok - device: didn't find right syntax.

33. tegrastat:
EMC – memory controller 
AVP – audio/video processor
VDE – video decoder engine
GR3D – GPU

RAM 3330/7853MB (lfb 379x4MB) SWAP 0/3926MB (cached 0MB) CPU [13%@345,off,off,13%@345,12%@345,18%@345] EMC_FREQ 0% GR3D_FREQ 0% PLL@43.5C MCPU@43.5C PMIC@100C Tboard@41C GPU@43.5C BCPU@43.5C thermal@43.8C Tdiode@42.25C VDD_SYS_GPU 83/117 VDD_SYS_SOC 629/711 VDD_4V0_WIFI 0/15 VDD_IN 2603/2879 VDD_SYS_CPU 167/152 VDD_SYS_DDR 538/661
RAM 3349/7853MB (lfb 378x4MB) SWAP 0/3926MB (cached 0MB) CPU [27%@499,off,off,20%@499,22%@499,25%@499] EMC_FREQ 0% GR3D_FREQ 21% PLL@42C MCPU@42C PMIC@100C Tboard@39C GPU@42C BCPU@42C thermal@41.8C Tdiode@40.75C VDD_SYS_GPU 125/104 VDD_SYS_SOC 1131/722 VDD_4V0_WIFI 0/0 VDD_IN 3670/2862 VDD_SYS_CPU 251/193 VDD_SYS_DDR 942/641
With sudo:
RAM 3343/7853MB (lfb 378x4MB) SWAP 0/3926MB (cached 0MB) CPU [7%@345,off,off,3%@345,4%@345,3%@345]     EMC_FREQ 1%@1062 GR3D_FREQ 0%@114 APE 150 PLL@41.5C MCPU@41.5C PMIC@100C Tboard@40C GPU@42C BCPU@41.5C thermal@41.7C Tdiode@40.5C VDD_SYS_GPU 83/83 VDD_SYS_SOC 419/381 VDD_4V0_WIFI 288/64 VDD_IN 2498/2197 VDD_SYS_CPU 125/87 VDD_SYS_DDR 443/391


34.Pipeline for using nvv4l2h264enc with v4l2src
gst-launch-1.0 v4l2src device="/dev/video3" num-buffers=600 ! 'video/x-raw,format=UYVY,interlace-mode=interleaved'  ! nvvidconv ! 'video/x-raw(memory:NVMM), format=(string)I420' ! nvv4l2h264enc bitrate=8000000 ! h264parse ! qtmux ! filesink location=here.mp4 -e

*************************************************************************VIDEO CONVERT***************************************
gst-launch-1.0 v4l2src device=/dev/video3 ! 'video/x-raw, format=(string)UYVY, interlace-mode=interleaved' ! nvvidconv ! 'video/x-raw(memory:NVMM), format=(string)I420' ! nvv4l2h264enc ! 'video/x-h264, stream-format=(string)byte-stream' ! h264parse ! qtmux ! filesink location=test.mp4 -e
***************************************************************************************************************************

gst-launch-1.0 v4l2src device="/dev/video3" num-buffers=600 ! 'video/x-raw,format=UYVY,interlace-mode=interleaved'  ! nvvidconv ! 'video/x-raw(memory:NVMM), format=(string)I420' ! nvv4l2h264enc bitrate=8000000 ! h264parse ! nvv4l2decoder ! nv3dsink -e

35.
video/x-raw is CPU buffer.
video/x-raw(memory:NVMM) is DMA buffer.

36.
What in the hell is DRM?

The DRM layer is intended to support the needs of complex graphics devices, usually containing programmable pipelines well suited to 3D graphics acceleration. It deals with:

 - A DMA queue for graphic buffers transfers.
 - It provides locks for graphics hardware, treating it as shared resource for simultaneous 3D applications.
 - And it provides secure hardware access, preventing clients from escalating privileges.
The DRM layer consists of two in-kernel drivers: a generic DRM driver, and another which has specific support for the video hardware. This is possible because the DRM engine is extensible, enabling the device-specific driver to hook out those functionalities that are required by the hardware. For example, in the case of the Intel cards, the Linux kernel driver i915 supports this card and couples its capabilities to the DRM driver.

37.
gst-launch-1.0 nvcompositor name=comp sink_0::xpos=0 sink_0::ypos=0 sink_0::width=1920 sink_0::height=1080 sink_1::xpos=0 sink_1::ypos=0 sink_1::width=1600 sink_1::height=1024 sink_2::xpos=0  sink_2::ypos=0 sink_2::width=1366 sink_2::height=768 sink_3::xpos=0 sink_3::ypos=0 sink_3::width=1024 sink_3::height=576 ! nvoverlaysink display-id=1 filesrc location=<filename_h264_1080p_30fps.mp4> ! qtdemux ! h264parse ! omxh264dec ! comp. filesrc location=< filename_h265_1080p_30fps.mp4> ! qtdemux ! h265parse ! omxh265dec ! comp. filesrc  location=< filename_vp8_1080p_30fps.webm> matroskademux ! omxvp8dec ! comp. filesrc location=<filename_vp9_1080p_30fps.webm> ! matroskademux ! omxvp9dec ! comp. -e

gst-launch-1.0 nvcompositor name=comp sink_0::xpos=0 sink_0::ypos=0 sink_0::width=1920 sink_0::height=1080 sink_1::xpos=0 sink_1::ypos=0 sink_1::width=1600 sink_1::height=1024 sink_2::xpos=0  sink_2::ypos=0 sink_2::width=1366 sink_2::height=768 sink_3::xpos=0 sink_3::ypos=0 sink_3::width=1024 sink_3::height=576 ! nvoverlaysink display-id=1 filesrc location=TextInMotion-VideoSample-1080p_h264.mp4 ! qtdemux ! h264parse ! omxh264dec ! comp. filesrc location=sample_1080p_h265.mp4 ! qtdemux ! h265parse ! omxh265dec ! comp. filesrc  location= tears_of_steel_1080p_vp8.webm matroskademux ! omxvp8dec ! comp. filesrc location=tears_of_steel_1080p_vp9.webm ! matroskademux ! omxvp9dec ! comp. -e

gst-launch-1.0 nvcompositor name=comp sink_0::xpos=0 sink_0::ypos=0 sink_0::width=1920 sink_0::height=1080 ! autovideoconvert ! nvoverlaysink sync=0 videotestsrc ! comp.


38. With OREN
UDP:
gst-launch-1.0 v4l2src device=/dev/video3 ! video/x-raw,format=UYVY, interlace-mode=interleaved ! nvvidconv ! 'video/x-raw(memory:NVMM), format=(string)NV12, framerate=(fraction)25/1' ! nvv4l2h264enc bitrate=8000000 ! h264parse ! rtph264pay mtu=1400 ! udpsink host=44.44.44.2 port=5000 sync=false async=false


RTSPClientSink not supported for jetson tx2: https://devtalk.nvidia.com/default/topic/1055034/jetson-tx2/how-to-generate-rtsp-stream-with-gstreamer-in-tx2/


Frozen stream: just one buffer
 ./test-launch "( v4l2src device=/dev/video3 ! video/x-raw, format=UYVY,  width=720, height=576, interlace-mode=interleaved ! nvvidconv ! video/x-raw(memory:NVMM), width=720, height=576, format=(string)NV12, framerate=(fraction)25/1 ! nvv4l2h264enc bitrate=8000000 ! h264parse ! rtph264pay name=pay0 pt=96 )"
 
 
39. Error when drm but without stopping drm:

motek@motek:~/Videos$ gst-launch-1.0 filesrc location=pedestrians.mp4 ! qtdemux name=demux ! h264parse  ! nvv4l2decoder ! nvvidconv interpolation-method=1 ! 'video/x-raw(memory:NVMM), format=(string)I420, width=1280, height=720' ! nvdrmvideosink -e
Setting pipeline to PAUSED ...
Opening in BLOCKING MODE 
Pipeline is PREROLLING ...
NvMMLiteOpen : Block : BlockType = 261 
NVMEDIA: Reading vendor.tegra.display-size : status: 6 
NvMMLiteBlockCreate : Block : BlockType = 261 
Failed to set plane 
Failed to display frame buffer
ERROR: from element /GstPipeline:pipeline0/GstQTDemux:demux: Internal data stream error.
Additional debug info:
qtdemux.c(6073): gst_qtdemux_loop (): /GstPipeline:pipeline0/GstQTDemux:demux:
streaming stopped, reason error (-5)
ERROR: pipeline doesn't want to preroll.
Setting pipeline to NULL ...
Freeing pipeline ...

40. Simulate EGLStream producer pipeline
nvgstcapture-1.0 --camsrc=3

41.
Reader reads but errors on the console:
GST_DEBUG=2,v4l2*=7 ./test-launch "videotestsrc num-buffers=9000 is-live=true ! video/x-raw,width=(int)1920,height=(int)1080,framerate=30/1,format=NV12 ! nvvideoconvert ! video/x-raw(memory:NVMM),width=(int)1920,height=(int)1080,framerate=30/1,format=NV12 ! nvv4l2h264enc bufapi-version=True ! h264parse ! rtph264pay name=pay0"

Crashes when:
GST_DEBUG=2,v4l2*=7 ./test-launch "videotestsrc num-buffers=9000 is-live=true ! video/x-raw,width=(int)720, height=(int)576, format=UYVY, interlace-mode=interleaved ! nvvidconv ! video/x-raw(memory:NVMM),width=(int)1920,height=(int)1080,framerate=30/1,format=NV12 ! nvv4l2h264enc bufapi-version=True ! h264parse ! rtph264pay name=pay0"

or: GST_DEBUG=2,v4l2*=7 ./test-launch "v4l2src device=/dev/video3 num-buffers=9000 ! video/x-raw,width=(int)720,height=(int)576,format=UYVY, interlace-mode=interleaved ! nvvidconv ! video/x-raw(memory:NVMM),width=(int)1920,height=(int)1080,framerate=30/1,format=NV12 ! nvv4l2h264enc bufapi-version=True ! h264parse ! rtph264pay name=pay0"

See: https://devtalk.nvidia.com/default/topic/1057526/deepstream-sdk/nvv4l2-encoder-crashes-on-a-particular-case/
See: https://bugzilla.gnome.org/show_bug.cgi?id=796525

42. Deepstream
Supports:
https://docs.nvidia.com/metropolis/deepstream/plugin-manual/index.html#page/DeepStream_Plugin_Manual%2Fdeepstream_plugin_faq.html%23wwpID0EGHA

43. Note
It seems that we need to add /usr/lib/aarch64-linux-gnu/ to the LD_LIBRARY_PATH

44. Check what is in a tar file
tar -jtvf public_sources.tbz2 

45. Compile nvv4l2 libraries:
  a- download L4T 32.2 public public_sources
  b- untar gst-nvvideo4linux2_src.tbz2
        tar -I lbzip2 -xvf gst-nvvideo4linux2_src.tbz2
        or
        tar xvf gst-nvvideo4linux2_src.tbz2
  c- cd gst-v4l2
  d- make
  e- sudo DEST_DIR=/usr/local/lib make install 
      ==> but it didn't put in /usr/local/lib but in /usr/lib/aarch64-linux-gnu/gstreamer-1.0
  f- correct:
        gstv4l2videoenc.c
        diff gstv4l2videoenc_org.c gst-nvvideo4linux2_src/gst-v4l2/gstv4l2videoenc.c 
            867a868,871
            >   /* Only renegotiate on upstream changes */
            >   if (self->input_state)
            >     return TRUE;
  g- compile, install
  ==> WORKS: ./test-launch "( v4l2src device=/dev/video3 num-buffers=10000 ! video/x-raw, format=UYVY,  width=720, height=576, interlace-mode=interleaved ! nvvidconv ! video/x-raw(memory:NVMM), width=720, height=576, format=(string)NV12, framerate=(fraction)25/1 ! nvv4l2h264enc bitrate=8000000 ! h264parse ! rtph264pay name=pay0 pt=96 )"

  
